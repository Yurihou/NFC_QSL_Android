Index: app/src/main/res/drawable/ic_launcher_foreground.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_launcher_foreground.xml b/app/src/main/res/drawable/ic_launcher_foreground.xml
new file mode 100644
--- /dev/null	(date 1733912625898)
+++ b/app/src/main/res/drawable/ic_launcher_foreground.xml	(date 1733912625898)
@@ -0,0 +1,30 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="85.84757"
+                android:endY="92.4963"
+                android:startX="42.9492"
+                android:startY="49.59793"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
+        android:strokeWidth="1"
+        android:strokeColor="#00000000" />
+</vector>
\ No newline at end of file
Index: app/src/main/res/layout/activity_nfcread.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_nfcread.xml b/app/src/main/res/layout/activity_nfcread.xml
new file mode 100644
--- /dev/null	(date 1734438591339)
+++ b/app/src/main/res/layout/activity_nfcread.xml	(date 1734438591339)
@@ -0,0 +1,211 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".NFCReadActivity">
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:layout_marginEnd="10dp"
+        android:layout_marginBottom="10dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+            <TextView
+                android:id="@+id/textView2"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Write a NFC QSL Card" />
+
+            <RadioGroup
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:orientation="horizontal">
+
+                <TextView
+                    android:id="@+id/textView3"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="right"
+                    android:text="To Confirm  " />
+
+                <RadioButton
+                    android:id="@+id/radioButtonQSL"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:checked="true"
+                    android:text="OUR QSO  " />
+
+                <RadioButton
+                    android:id="@+id/radioButtonSWL"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="UR RPRT  " />
+            </RadioGroup>
+
+            <TextView
+                android:id="@+id/textView9"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Your Callsign *" />
+
+            <EditText
+                android:id="@+id/editTextMyCall"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:digits="0123456789qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM/"
+                android:ems="10"
+                android:inputType="text"
+                android:maxLength="12" />
+
+            <TextView
+                android:id="@+id/textView10"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="To Radio *" />
+
+            <EditText
+                android:id="@+id/editTextToCall"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:digits="0123456789qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM/"
+                android:ems="10"
+                android:inputType="text"
+                android:maxLength="16" />
+
+            <TextView
+                android:id="@+id/textView11"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="QSO Date (YYYYMMDD) *" />
+
+            <EditText
+                android:id="@+id/editTextDate"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:digits="1234567890"
+                android:ems="10"
+                android:inputType="date"
+                android:maxLength="8" />
+
+            <TextView
+                android:id="@+id/textView12"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="QSO Time UTC (HHMM) *" />
+
+            <EditText
+                android:id="@+id/editTextTime"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:digits="1234567890"
+                android:ems="10"
+                android:inputType="time"
+                android:maxLength="4" />
+
+            <TextView
+                android:id="@+id/textView13"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Frequency (MHz)" />
+
+            <EditText
+                android:id="@+id/editTextFreq"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:digits="1234567890."
+                android:ems="10"
+                android:inputType="text"
+                android:maxLength="8" />
+
+            <TextView
+                android:id="@+id/textView14"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Mode" />
+
+            <Spinner
+                android:id="@+id/spinnerMode"
+                android:layout_width="match_parent"
+                android:layout_height="38dp" />
+
+            <TextView
+                android:id="@+id/textView15"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="RST" />
+
+            <EditText
+                android:id="@+id/editTextRst"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:ems="10"
+                android:inputType="text"
+                android:maxLength="8" />
+
+            <RadioGroup
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:orientation="horizontal">
+
+                <Space
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1" />
+
+                <RadioButton
+                    android:id="@+id/radioButtonPSE"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:checked="true"
+                    android:text="PSE  " />
+
+                <RadioButton
+                    android:id="@+id/radioButtonTNX"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="TNX  " />
+            </RadioGroup>
+
+            <TextView
+                android:id="@+id/textViewNoteCap"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Note" />
+
+            <EditText
+                android:id="@+id/editTextNote"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:ems="10"
+                android:gravity="start|top"
+                android:inputType="textMultiLine" />
+
+            <Button
+                android:id="@+id/writeButton2"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Write QSL" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:orientation="horizontal"/>
+        </LinearLayout>
+    </ScrollView>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml b/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
--- /dev/null	(date 1733912625909)
+++ b/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml	(date 1733912625909)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
new file mode 100644
--- /dev/null	(date 1734432604774)
+++ b/app/src/main/res/values/strings.xml	(date 1734432604774)
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">NFC QSL</string>
+</resources>
\ No newline at end of file
Index: app/src/main/java/com/example/nfcqsl/NFCReadActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nfcqsl/NFCReadActivity.kt b/app/src/main/java/com/example/nfcqsl/NFCReadActivity.kt
new file mode 100644
--- /dev/null	(date 1734442439029)
+++ b/app/src/main/java/com/example/nfcqsl/NFCReadActivity.kt	(date 1734442439029)
@@ -0,0 +1,311 @@
+package com.example.nfcqsl
+
+import android.annotation.SuppressLint
+import android.content.Context
+import android.nfc.Tag
+import android.nfc.TagLostException
+import android.nfc.tech.MifareUltralight
+import android.os.Bundle
+import android.text.Editable
+import android.text.InputFilter
+import android.text.TextWatcher
+import android.widget.ArrayAdapter
+import android.widget.Button
+import android.widget.EditText
+import android.widget.RadioButton
+import android.widget.Spinner
+import android.widget.TextView
+import android.widget.Toast
+import androidx.activity.enableEdgeToEdge
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import java.io.IOException
+import java.text.SimpleDateFormat
+import java.time.Instant
+import java.util.Date
+import java.util.TimeZone
+
+class NFCReadActivity : AppCompatActivity() {
+
+    private var tag: Tag? = null
+    private var maxLength: Int = 0
+
+    private fun isNumeric(s: String): Boolean {
+        return try {
+            s.toFloat()
+            true
+        } catch (e: NumberFormatException) {
+            false
+        }
+    }
+
+    private fun intToBytes2(n: Int): ByteArray {
+        val b = ByteArray(4)
+        for (i in 0..3) {
+            b[i] = (n shr (24 - i * 8)).toByte()
+        }
+        return b
+    }
+
+    @SuppressLint("SimpleDateFormat", "WeekBasedYear", "NewApi", "SetTextI18n")
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enableEdgeToEdge()
+        setContentView(R.layout.activity_nfcread)
+        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
+            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
+            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
+            insets
+        }
+
+        val button: Button = findViewById<Button>(R.id.writeButton2)
+        //val unlockButton: Button = findViewById<Button>(R.id.buttonUnlock)
+
+        val myCallText: EditText = findViewById<EditText>(R.id.editTextMyCall)
+        val toCallText: EditText = findViewById<EditText>(R.id.editTextToCall)
+        val dateText: EditText = findViewById<EditText>(R.id.editTextDate)
+        val timeText: EditText = findViewById<EditText>(R.id.editTextTime)
+        val freqText: EditText = findViewById<EditText>(R.id.editTextFreq)
+        val rstText: EditText = findViewById<EditText>(R.id.editTextRst)
+        val noteText: EditText = findViewById<EditText>(R.id.editTextNote)
+
+        val swlRadio: RadioButton = findViewById<RadioButton>(R.id.radioButtonSWL)
+        val tnxRadio: RadioButton = findViewById<RadioButton>(R.id.radioButtonTNX)
+
+        val modeSpinner: Spinner = findViewById<Spinner>(R.id.spinnerMode);
+
+        val noteCapTextView: TextView = findViewById<TextView>(R.id.textViewNoteCap)
+
+        val starArray = arrayOf("AM", "CW", "Eyeball", "FM", "FT4", "FT8", "RTTY", "SSB", "Others")
+        val starAdapter: ArrayAdapter<String> = ArrayAdapter<String>(this,
+            android.R.layout.simple_list_item_1, starArray)
+        modeSpinner.adapter = starAdapter;
+        val a = starArray.indexOf("CW")
+        modeSpinner.setSelection(a)
+
+        val dateFormat = SimpleDateFormat("yyyyMMdd")
+        val timeFormat = SimpleDateFormat("HHmm")
+        dateFormat.timeZone = TimeZone.getTimeZone("UTC")
+        timeFormat.timeZone = TimeZone.getTimeZone("UTC")
+        val timeNow = Date.from(Instant.now())
+        val dateStr = dateFormat.format(timeNow)
+        val timeStr = timeFormat.format(timeNow)
+
+        dateText.setText(dateStr)
+        timeText.setText(timeStr)
+
+        /*
+        unlockButton.setOnClickListener{
+            val ul : MifareUltralight = MifareUltralight.get(tag)
+            try {
+                ul.connect()
+                // Get into PWD_AUTH authentication
+                ul.transceive(byteArrayOf(0x1B.toByte(), 0xFF.toByte(), 0xFF.toByte(), 0xFF.toByte(), 0xFF.toByte()))
+                ul.writePage(43, byteArrayOf(0xFF.toByte(), 0xFF.toByte(), 0xFF.toByte(), 0xFF.toByte()))
+                ul.writePage(44, byteArrayOf(0x00.toByte(), 0x00.toByte(), 0x00.toByte(), 0x00.toByte()))
+                ul.writePage(41, byteArrayOf(0x04.toByte(), 0x00.toByte(), 0x00.toByte(), 0xFF.toByte()))
+                Toast.makeText(this, "Unlock NTag successfully!", Toast.LENGTH_SHORT)
+                    .show()
+            } catch (e: TagLostException) {
+                Toast.makeText(this, "Tag Connection Lost.", Toast.LENGTH_SHORT).show()
+                this.finish()
+            } catch (e: Exception) {
+                Toast.makeText(this, "Password Error or Connection Lost.", Toast.LENGTH_SHORT).show()
+                this.finish()
+            } finally {
+                try {
+                    ul.close()
+                } catch (e: IOException) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace()
+                }
+            }
+        }
+
+         */
+        noteText.addTextChangedListener(object : TextWatcher {
+            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
+
+            }
+
+            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
+
+                var currentStr: String = s!!.toString()
+                if(currentStr.toByteArray().size > maxLength) {
+                    noteText.removeTextChangedListener(this)
+                    while (currentStr.toByteArray().size > maxLength) {
+                        currentStr = currentStr.substring(0, currentStr.length - 1)
+                    }
+                    noteText.setText(currentStr);
+                    noteText.setSelection(currentStr.length)
+                    noteText.addTextChangedListener(this)
+                }
+            }
+
+            override fun afterTextChanged(s: Editable?) {
+
+            }
+        })
+
+        button.setOnClickListener {
+            val ul : MifareUltralight = MifareUltralight.get(tag)
+
+            if(myCallText.text.isEmpty()) {
+                Toast.makeText(this, "Your call sign could not left blank.", Toast.LENGTH_SHORT).show()
+            } else if(toCallText.text.isEmpty()) {
+                Toast.makeText(this, "To radio call sign could not left blank.", Toast.LENGTH_SHORT).show()
+            } else if(dateText.text.isEmpty()) {
+                Toast.makeText(this, "QSO Date could not left blank.", Toast.LENGTH_SHORT).show()
+            } else if(timeText.text.isEmpty()) {
+                Toast.makeText(this, "QSO time could not left blank.", Toast.LENGTH_SHORT).show()
+            } else if(freqText.text.isNotEmpty() &&!isNumeric(freqText.text.toString())){
+                Toast.makeText(this, "QSO Frequency format is invalid.", Toast.LENGTH_SHORT).show()
+            } else {
+
+                try {
+                    ul.connect()
+                    val isSWL: Byte = if (swlRadio.isChecked) 1 else 0
+                    val isTNX: Byte = if (tnxRadio.isChecked) 1 else 0
+
+                    ul.writePage(4, byteArrayOf(0x72, isSWL, isTNX, 0x00))
+
+                    var callSign: ByteArray = myCallText.text.toString().toByteArray()
+                    while (callSign.size <= 12) {
+                        callSign += 0
+                    }
+                    ul.writePage(5, callSign.copyOfRange(0, 4))
+                    ul.writePage(6, callSign.copyOfRange(4, 8))
+                    ul.writePage(7, callSign.copyOfRange(8, 12))
+
+                    var toCallSign: ByteArray = toCallText.text.toString().toByteArray()
+                    while (toCallSign.size <= 16) {
+                        toCallSign += 0
+                    }
+                    ul.writePage(8, toCallSign.copyOfRange(0, 4))
+                    ul.writePage(9, toCallSign.copyOfRange(4, 8))
+                    ul.writePage(10, toCallSign.copyOfRange(8, 12))
+                    ul.writePage(11, toCallSign.copyOfRange(12, 16))
+
+                    val timeStr1 = dateText.text.toString() + timeText.text.toString()
+                    val dateFormat1 = SimpleDateFormat("yyyyMMddHHmm")
+                    dateFormat1.timeZone = TimeZone.getTimeZone("UTC")
+                    var timestamp1:Long = dateFormat1.parse(timeStr1)!!.time
+                    val timestampByteArrayL: ByteArray = ByteArray(4)
+                    val timestampByteArrayH: ByteArray = ByteArray(4)
+
+                    timestamp1 = timestamp1 / 1000
+                    for(i in 0..3) {
+                        val timestampParse = timestamp1.rem(256)
+                        timestamp1 /= 256
+                        timestampByteArrayL[i] = timestampParse.toByte()
+                    }
+                    for(i in 0..3) {
+                        val timestampParse = timestamp1.rem(256)
+                        timestamp1 /= 256
+                        timestampByteArrayH[i] = timestampParse.toByte()
+                    }
+
+                    ul.writePage(12, timestampByteArrayL)
+                    ul.writePage(13, timestampByteArrayH)
+
+                    if(freqText.text.isNotEmpty()){
+                        var freqArray: ByteArray = freqText.text.toString().toByteArray()
+                        while (freqArray.size <= 8) {
+                            freqArray += 0
+                        }
+                        ul.writePage(14, freqArray.copyOfRange(0, 4))
+                        ul.writePage(15, freqArray.copyOfRange(4, 8))
+                    }
+                    else{
+                        ul.writePage(14, byteArrayOf(0,0,0,0))
+                        ul.writePage(15, byteArrayOf(0,0,0,0))
+                    }
+
+                    var modeArray: ByteArray = modeSpinner.selectedItem.toString().toByteArray()
+                    while (modeArray.size <= 8) {
+                        modeArray += 0
+                    }
+                    ul.writePage(16, modeArray.copyOfRange(0, 4))
+                    ul.writePage(17, modeArray.copyOfRange(4, 8))
+
+                    if(rstText.text.isNotEmpty()){
+                        var rstArray: ByteArray = rstText.text.toString().toByteArray()
+                        while (rstArray.size <= 8) {
+                            rstArray += 0
+                        }
+                        ul.writePage(18, rstArray.copyOfRange(0, 4))
+                        ul.writePage(19, rstArray.copyOfRange(4, 8))
+                    }
+                    else{
+                        ul.writePage(18, byteArrayOf(0,0,0,0))
+                        ul.writePage(19, byteArrayOf(0,0,0,0))
+                    }
+
+                    val data: ByteArray = ul.readPages(0);
+                    val maxLength = data[14].toInt()*8;
+
+                    if(noteText.text.isNotEmpty()){
+                        var noteArray: ByteArray = noteText.text.toString().toByteArray()
+                        if (noteArray.size > 80) noteArray=noteArray.copyOfRange(0,80)
+                        while (noteArray.size < 80) {
+                            noteArray += 0
+                        }
+                        for(i in 20..< (maxLength - 64) / 4 + 20) {
+                            ul.writePage(i, noteArray.copyOfRange((i-20)*4, (i-20)*4+4))
+                        }
+                    }
+                    else{
+                        for(i in 20..< (maxLength - 64) / 4 + 20) {
+                            ul.writePage(i, byteArrayOf(0, 0, 0, 0))
+                        }
+                    }
+
+                    val sharedPref = this.getSharedPreferences("mycall", MODE_PRIVATE)
+                    with (sharedPref.edit()) {
+                        putString("name", myCallText.text.toString())
+                        apply()
+                    }
+
+                    Toast.makeText(this, "Write QSL info successfully! Please re-scan the Tag", Toast.LENGTH_SHORT)
+                        .show()
+
+                } catch (e: TagLostException) {
+                    Toast.makeText(this, "Tag Connection Lost.", Toast.LENGTH_SHORT).show()
+                    //this.finish()
+                } catch (e: Exception) {
+                    Toast.makeText(this, "Write QSL info error!", Toast.LENGTH_SHORT).show()
+                    //this.finish()
+                } finally {
+                    try {
+                        ul.close()
+                        this.finish()
+                    } catch (e: IOException) {
+                        // TODO Auto-generated catch block
+                        e.printStackTrace()
+                    }
+                }
+            }
+        }
+
+        tag = intent.getParcelableExtra<Tag>("tag")
+        if(tag != null) {
+            //Toast.makeText(this, "OK", Toast.LENGTH_SHORT).show()
+        } else {
+            Toast.makeText(this, "Tag info error!", Toast.LENGTH_SHORT).show()
+        }
+
+        val tagCapacity = intent.getIntExtra("maxLength", 0);
+        noteText.filters = arrayOf(InputFilter.LengthFilter(tagCapacity - 64))
+        noteCapTextView.text = "Note (Maximum length: " + (tagCapacity - 64) + ")"
+        maxLength = tagCapacity - 64
+
+        val sharedPref = this.getSharedPreferences("mycall", MODE_PRIVATE)
+        val myCallFromPref: String? = sharedPref.getString("name", "")
+        if (myCallFromPref != null){
+            myCallText.setText(myCallFromPref)
+        }
+
+
+    }
+}
\ No newline at end of file
Index: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
--- /dev/null	(date 1733912625692)
+++ b/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml	(date 1733912625692)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_launcher_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_launcher_background.xml b/app/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
--- /dev/null	(date 1733912625880)
+++ b/app/src/main/res/drawable/ic_launcher_background.xml	(date 1733912625880)
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path
+        android:fillColor="#3DDC84"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+</vector>
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
new file mode 100644
--- /dev/null	(date 1733912625508)
+++ b/build.gradle.kts	(date 1733912625508)
@@ -0,0 +1,5 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+plugins {
+    alias(libs.plugins.android.application) apply false
+    alias(libs.plugins.kotlin.android) apply false
+}
\ No newline at end of file
Index: app/src/main/res/xml/backup_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/backup_rules.xml b/app/src/main/res/xml/backup_rules.xml
new file mode 100644
--- /dev/null	(date 1733912625960)
+++ b/app/src/main/res/xml/backup_rules.xml	(date 1733912625960)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample backup rules file; uncomment and customize as necessary.
+   See https://developer.android.com/guide/topics/data/autobackup
+   for details.
+   Note: This file is ignored for devices older that API 31
+   See https://developer.android.com/about/versions/12/backup-restore
+-->
+<full-backup-content>
+    <!--
+   <include domain="sharedpref" path="."/>
+   <exclude domain="sharedpref" path="device.xml"/>
+-->
+</full-backup-content>
\ No newline at end of file
Index: app/src/main/res/xml/data_extraction_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/data_extraction_rules.xml b/app/src/main/res/xml/data_extraction_rules.xml
new file mode 100644
--- /dev/null	(date 1733912625969)
+++ b/app/src/main/res/xml/data_extraction_rules.xml	(date 1733912625969)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample data extraction rules file; uncomment and customize as necessary.
+   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
+   for details.
+-->
+<data-extraction-rules>
+    <cloud-backup>
+        <!-- TODO: Use <include> and <exclude> to control what is backed up.
+        <include .../>
+        <exclude .../>
+        -->
+    </cloud-backup>
+    <!--
+    <device-transfer>
+        <include .../>
+        <exclude .../>
+    </device-transfer>
+    -->
+</data-extraction-rules>
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1733912625087)
+++ b/.gitignore	(date 1733912625087)
@@ -0,0 +1,15 @@
+*.iml
+.gradle
+/local.properties
+/.idea/caches
+/.idea/libraries
+/.idea/modules.xml
+/.idea/workspace.xml
+/.idea/navEditor.xml
+/.idea/assetWizardSettings.xml
+.DS_Store
+/build
+/captures
+.externalNativeBuild
+.cxx
+local.properties
Index: settings.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle.kts b/settings.gradle.kts
new file mode 100644
--- /dev/null	(date 1733914445801)
+++ b/settings.gradle.kts	(date 1733914445801)
@@ -0,0 +1,31 @@
+pluginManagement {
+    repositories {
+        maven { url=uri ("https://www.jitpack.io")}
+        maven { url=uri ("https://maven.aliyun.com/repository/releases")}
+        maven { url=uri ("https://maven.aliyun.com/repository/google")}
+        maven { url=uri ("https://maven.aliyun.com/repository/central")}
+        maven { url=uri ("https://maven.aliyun.com/repository/gradle-plugin")}
+        maven { url=uri ("https://maven.aliyun.com/repository/public")}
+
+        google {
+            content {
+                includeGroupByRegex("com\\.android.*")
+                includeGroupByRegex("com\\.google.*")
+                includeGroupByRegex("androidx.*")
+            }
+        }
+        mavenCentral()
+        gradlePluginPortal()
+    }
+}
+dependencyResolutionManagement {
+    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
+    repositories {
+        google()
+        mavenCentral()
+    }
+}
+
+rootProject.name = "NFC QSL"
+include(":app")
+ 
\ No newline at end of file
Index: app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
new file mode 100644
--- /dev/null	(date 1733912625926)
+++ b/app/src/main/res/values/themes.xml	(date 1733912625926)
@@ -0,0 +1,9 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <!-- Base application theme. -->
+    <style name="Base.Theme.NFCQSL" parent="Theme.Material3.DayNight.NoActionBar">
+        <!-- Customize your light theme here. -->
+        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
+    </style>
+
+    <style name="Theme.NFCQSL" parent="Base.Theme.NFCQSL" />
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
new file mode 100644
--- /dev/null	(date 1733912625938)
+++ b/app/src/main/res/values/colors.xml	(date 1733912625938)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="black">#FF000000</color>
+    <color name="white">#FFFFFFFF</color>
+</resources>
\ No newline at end of file
Index: app/src/main/res/values-night/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values-night/themes.xml b/app/src/main/res/values-night/themes.xml
new file mode 100644
--- /dev/null	(date 1733912625948)
+++ b/app/src/main/res/values-night/themes.xml	(date 1733912625948)
@@ -0,0 +1,7 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <!-- Base application theme. -->
+    <style name="Base.Theme.NFCQSL" parent="Theme.Material3.DayNight.NoActionBar">
+        <!-- Customize your dark theme here. -->
+        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
+    </style>
+</resources>
\ No newline at end of file
Index: .idea/kotlinc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/kotlinc.xml b/.idea/kotlinc.xml
new file mode 100644
--- /dev/null	(date 1734437737633)
+++ b/.idea/kotlinc.xml	(date 1734437737633)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="KotlinJpsPluginSettings">
+    <option name="version" value="2.1.0" />
+  </component>
+</project>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1733913357310)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1733913357310)
@@ -0,0 +1,7 @@
+#Wed Dec 11 18:27:44 CST 2024
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+#distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-bin.zip
+distributionUrl=https://mirrors.cloud.tencent.com/gradle/gradle-8.9-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1733912755565)
+++ b/.idea/.name	(date 1733912755565)
@@ -0,0 +1,1 @@
+NFC QSL
\ No newline at end of file
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(date 1733912625121)
+++ b/gradlew	(date 1733912625121)
@@ -0,0 +1,185 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1734439243091)
+++ b/.idea/misc.xml	(date 1734439243091)
@@ -0,0 +1,9 @@
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(date 1733912625124)
+++ b/gradlew.bat	(date 1733912625124)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
--- /dev/null	(date 1733912625181)
+++ b/gradle.properties	(date 1733912625181)
@@ -0,0 +1,23 @@
+# Project-wide Gradle settings.
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. For more details, visit
+# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
+# org.gradle.parallel=true
+# AndroidX package structure to make it clearer which packages are bundled with the
+# Android operating system, and which are packaged with your app's APK
+# https://developer.android.com/topic/libraries/support-library/androidx-rn
+android.useAndroidX=true
+# Kotlin code style for this project: "official" or "obsolete":
+kotlin.code.style=official
+# Enables namespacing of each library's R class so that its R class includes only the
+# resources declared in the library itself and none from the library's dependencies,
+# thereby reducing the size of the R class for that library
+android.nonTransitiveRClass=true
\ No newline at end of file
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
new file mode 100644
--- /dev/null	(date 1734432308643)
+++ b/app/src/main/res/layout/activity_main.xml	(date 1734432308643)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".MainActivity">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:layout_marginEnd="10dp"
+        android:layout_marginBottom="10dp"
+        android:orientation="vertical"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <ScrollView
+            android:id="@+id/scrollView2"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical">
+
+                <TextView
+                    android:id="@+id/textView"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:text="Please put NFC card near the back side of your phone." />
+            </LinearLayout>
+        </ScrollView>
+
+        <Space
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="1" />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            android:orientation="vertical">
+
+            <Button
+                android:id="@+id/writeButton"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Write this QSL"
+                android:visibility="invisible" />
+
+            <Button
+                android:id="@+id/buttonLockUnlock"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Lock this QSL"
+                android:visibility="invisible" />
+
+            <Button
+                android:id="@+id/buttonAbout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="bottom"
+                android:text="About" />
+        </LinearLayout>
+    </LinearLayout>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/nfcqsl/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nfcqsl/MainActivity.kt b/app/src/main/java/com/example/nfcqsl/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1734435267205)
+++ b/app/src/main/java/com/example/nfcqsl/MainActivity.kt	(date 1734435267205)
@@ -0,0 +1,326 @@
+package com.example.nfcqsl
+
+import android.annotation.SuppressLint
+import android.app.PendingIntent
+import android.content.DialogInterface
+import android.content.Intent
+import android.content.IntentFilter
+import android.net.Uri
+import android.nfc.NfcAdapter
+import android.nfc.Tag
+import android.nfc.TagLostException
+import android.nfc.tech.MifareUltralight
+import android.os.Bundle
+import android.util.Log
+import android.widget.Button
+import android.widget.TextView
+import android.widget.Toast
+import androidx.activity.enableEdgeToEdge
+import androidx.appcompat.app.AlertDialog
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import java.io.IOException
+import java.text.SimpleDateFormat
+import java.time.Instant
+import java.util.Date
+import java.util.Locale
+import java.util.TimeZone
+
+
+class MainActivity : AppCompatActivity() {
+
+    private var mNfcAdapter: NfcAdapter? = null
+    private var pIntent: PendingIntent? = null
+    private var tag: Tag? = null
+
+    private var maxLength: Int = 0
+    private var encrypted: Boolean = false
+
+    //private val text: TextView = null
+
+    private fun byteToInt2(b: ByteArray): Int {
+        return (((b[0].toInt()) shl 24) + ((b[1].toInt()) shl 16)
+                + ((b[2].toInt()) shl 8) + b[3])
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enableEdgeToEdge()
+        setContentView(R.layout.activity_main)
+        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
+            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
+            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
+            insets
+        }
+        val button: Button = findViewById<Button>(R.id.writeButton)
+        val buttonAbout: Button = findViewById<Button>(R.id.buttonAbout)
+        val buttonLockUnlock: Button = findViewById<Button>(R.id.buttonLockUnlock)
+
+        button.setOnClickListener {
+            val intent = Intent(this, NFCReadActivity::class.java)
+            intent.putExtra("tag", tag)
+            intent.putExtra("maxLength", maxLength)
+            startActivity(intent)
+        }
+
+        buttonLockUnlock.setOnClickListener {
+            val intent = Intent(this, NFCLockUnlockActivity::class.java)
+            intent.putExtra("tag", tag)
+            intent.putExtra("encrypted", encrypted)
+            startActivity(intent)
+        }
+
+        buttonAbout.setOnClickListener {
+            AlertDialog.Builder(this)
+                .setTitle("About")
+                .setMessage("This APP is developed by BH9DWE.\n" +
+                        "How to use:\n" +
+                        "\tJust put NFC tag on the QSL card near the back of your phone, " +
+                        "then QSL info in the NFC tag (or empty) will display. " +
+                        "If the NFC is available, \"Write a QSL\" button will be visible. " +
+                        "You can push the button to log your QSL info into the NFC tag.\n\n" +
+                        "For further information, please visit our GitHub page.")
+                .setPositiveButton("OK")
+                {
+                    dialog, which ->
+                    dialog.dismiss()
+                }
+                .setNeutralButton("GitHub")
+                {
+                    dialog, which ->
+                    val intent: Intent = Intent(Intent.ACTION_VIEW)
+                    intent.addCategory(Intent.CATEGORY_BROWSABLE);
+                    intent.setData(Uri.parse("https://yurihou.github.io"))
+                    startActivity(intent)
+                }
+                .create().show()
+        }
+
+        //text = findViewById<TextView>(R.id.textView)
+        initNfc()
+    }
+
+    private fun initNfc() {
+        mNfcAdapter = NfcAdapter.getDefaultAdapter(this)
+        pIntent = PendingIntent.getActivity(
+            this, 0,  //在Manifest里或者这里设置当前activity启动模式，否则每次向阳NFC事件，activity会重复创建
+            // 当然也要按照具体情况来，你设置成singleTask也不是不行，
+            Intent(this, javaClass).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP),
+            0
+        )
+    }
+
+    @SuppressLint("DefaultLocale", "NewApi")
+    override fun onNewIntent(intent: Intent) {
+        super.onNewIntent(intent)
+        //这里必须setIntent，set  NFC事件响应后的intent才能拿到数据
+        setIntent(intent)
+        val button: Button = findViewById<Button>(R.id.writeButton)
+        val text: TextView = findViewById<TextView>(R.id.textView)
+        val buttonLockUnlock: Button = findViewById<Button>(R.id.buttonLockUnlock)
+        tag = getIntent().getParcelableExtra<Tag>(NfcAdapter.EXTRA_TAG)
+        if(tag != null) {
+            // card info process
+            val typeDesc: String
+            if (!tag!!.techList.contains("android.nfc.tech.MifareUltralight")) {
+                text.text = "Invalid NFC Tag."
+            }
+            else {
+                val ul : MifareUltralight = MifareUltralight.get(tag)
+
+                var info: String = ""
+                try {
+                    ul.connect();
+
+                    val data: ByteArray = ul.readPages(0);
+                    if (data[12].toUByte() == 0xE1u.toUByte() && data[13].toUByte() == 0x10u.toUByte() && data[15].toUByte() == 0x00u.toUByte()){
+                        info = "Succeed reading NFC Tag!\n"
+                        maxLength = data[14].toInt()*8;
+                        val serialNum: String = String.format("%02X%02X%02X%02X%02X%02X%02X",
+                            data[0], data[1], data[2], data[4], data[5], data[6], data[7])
+                        info += "NFC Serial Number: "
+                        info += serialNum
+                        info += "\n"
+                        
+                        val data2: ByteArray = ul.readPages(4);
+                        if (data2[0].toUByte() == 0x72u.toUByte()) {
+                            info += "QSL Info:\n"
+
+                            info += if (data2[1].toUByte() == 0x01u.toUByte()) "\tTo Confirm your report:\n"
+                            else "\tTo Confirm our QSO:\n"
+
+                            val pseTnxStr = if (data2[2].toUByte() == 0x01u.toUByte()) "TNX" else "PSE your QSL"
+
+                            val myCallStr = String(data2.copyOfRange(4,16), Charsets.UTF_8)
+                            info += "\tFrom: \t"
+                            info += myCallStr
+                            info += "\n"
+
+                            val data3: ByteArray = ul.readPages(8)
+                            val toCallStr = String(data3, Charsets.UTF_8)
+                            info += "\tTo: \t"
+                            info += toCallStr
+                            info += "\n"
+
+                            val data4: ByteArray = ul.readPages(12)
+                            var timestampLong: Long = 0;
+                            var timestampLongProducter: Long = 1;
+                            for (i in 0..7) {
+                                timestampLong += data4[i].toUByte().toLong()*timestampLongProducter;
+                                timestampLongProducter *= 256
+                            }
+
+                            val dateFormat = SimpleDateFormat("yyyyMMdd")
+                            val timeFormat = SimpleDateFormat("HHmm")
+                            dateFormat.timeZone = TimeZone.getTimeZone("UTC")
+                            timeFormat.timeZone = TimeZone.getTimeZone("UTC")
+                            val timeNow = Date.from(Instant.ofEpochMilli(timestampLong*1000))
+                            val dateStr = dateFormat.format(timeNow)
+                            val timeStr = timeFormat.format(timeNow)
+
+                            info += "\tQSO Date: \t"
+                            info += dateStr
+                            info += "\n"
+                            info += "\tQSO Time UTC: \t"
+                            info += timeStr
+                            info += "\n"
+
+                            val freqStr = String(data4.copyOfRange(8,16), Charsets.UTF_8)
+                            info += "\tFreq: \t"
+                            info += freqStr
+                            info += " MHz\n"
+
+                            val data5: ByteArray = ul.readPages(16)
+
+                            val modeStr = String(data5.copyOfRange(0,8), Charsets.UTF_8)
+                            info += "\tMode: \t"
+                            info += modeStr
+                            info += "\n"
+
+                            val rstStr = String(data5.copyOfRange(8,16), Charsets.UTF_8)
+                            info += "\tRST: \t"
+                            info += rstStr
+                            info += "\n"
+
+                            info += "\tNote:\n\t"
+
+                            var data6 = ByteArray(0)
+                            for (i in 0..<(maxLength - 64)/4 step 4){
+                                data6 += ul.readPages(20 + i)
+                            }
+                            //data6 += ul.readPages(24)
+                            //data6 += ul.readPages(28)
+                            //data6 += ul.readPages(32)
+                            //data6 += ul.readPages(36)
+                            data6 += 0
+
+                            val noteStr = String(data6, Charsets.UTF_8)
+                            info += noteStr
+                            info += "\n"
+
+                            info += pseTnxStr;
+                            info += "\n"
+                        }
+                        else {
+                            info += "Empty QSL card.\n"
+                        }
+
+                        val data7: ByteArray = ul.readPages((maxLength - 64) / 4 + 21)
+                        if (data7[3] == 0xFF.toByte()){
+                            info += "This QSL card is able to write in."
+                            button.visibility = Button.VISIBLE
+                            buttonLockUnlock.visibility = Button.VISIBLE
+                            buttonLockUnlock.text = "Lock this QSL"
+                            encrypted = false
+                        } else {
+                            info += "This QSL card is Locked."
+                            button.visibility = Button.INVISIBLE
+                            buttonLockUnlock.visibility = Button.VISIBLE
+                            buttonLockUnlock.text = "Unlock this QSL"
+                            encrypted = true
+                        }
+                    }
+                    else {
+                        info = "Invalid NFC Tag.";
+                    }
+                } catch (e : TagLostException) {
+                    Toast.makeText(this, "Tag Connection Lost.", Toast.LENGTH_SHORT).show()
+                } catch (e : Exception) {
+                    // TODO: handle exception
+                }finally{
+                    try {
+                        ul.close()
+                        text.text = info
+                    } catch (e : IOException) {
+                        // TODO Auto-generated catch block
+                        e.printStackTrace()
+                    }
+                }
+
+
+            }
+
+        } else {
+            text.text = "Failed to get NFC info."
+        }
+    }
+
+    override fun onResume() {
+        super.onResume()
+        Log.i("FlashTestNFC", "onResume")
+        if (mNfcAdapter != null) {
+            //添加intent-filter
+            val ndef = IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED)
+            val tag = IntentFilter(NfcAdapter.ACTION_TAG_DISCOVERED)
+            val tech = IntentFilter(NfcAdapter.ACTION_TECH_DISCOVERED)
+            val filters = arrayOf(ndef, tag, tech)
+
+
+            //添加 ACTION_TECH_DISCOVERED 情况下所能读取的NFC格式，这里列的比较全，实际我这里是没有用到的，因为测试的卡是NDEF的
+            val techList = arrayOf(
+                arrayOf(
+                    "android.nfc.tech.Ndef",
+                    "android.nfc.tech.NfcA",
+                    "android.nfc.tech.NfcB",
+                    "android.nfc.tech.NfcF",
+                    "android.nfc.tech.NfcV",
+                    "android.nfc.tech.NdefFormatable",
+                    "android.nfc.tech.MifareClassic",
+                    "android.nfc.tech.MifareUltralight",
+                    "android.nfc.tech.NfcBarcode"
+                )
+            )
+            mNfcAdapter!!.enableForegroundDispatch(this, pIntent, filters, techList)
+        }
+    }
+
+    override fun onPause() {
+        super.onPause()
+        Log.i("FlashTestNFC", "onPause")
+        if (mNfcAdapter != null) {
+            mNfcAdapter!!.disableForegroundDispatch(this)
+        }
+    }
+
+    /**
+     * 2进制to 16进制
+     * @param src
+     * @return
+     */
+    private fun bytesToHex(src: ByteArray?): String? {
+        val sb = StringBuffer()
+        if (src == null || src.size <= 0) {
+            return null
+        }
+        var sTemp: String
+        for (i in src.indices) {
+            sTemp = Integer.toHexString(0xFF and src[i].toInt())
+            if (sTemp.length < 2) {
+                sb.append(0)
+            }
+            sb.append(sTemp.uppercase(Locale.getDefault()))
+        }
+        return sb.toString()
+    }
+}
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1733915677716)
+++ b/.idea/compiler.xml	(date 1733915677716)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="21" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
new file mode 100644
--- /dev/null	(date 1734439187835)
+++ b/.idea/deploymentTargetSelector.xml	(date 1734439187835)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetSelector">
+    <selectionStates>
+      <SelectionState runConfigName="app">
+        <option name="selectionMode" value="DROPDOWN" />
+      </SelectionState>
+    </selectionStates>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1733912756003)
+++ b/.idea/.gitignore	(date 1733912756003)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
new file mode 100644
--- /dev/null	(date 1734437435009)
+++ b/gradle/libs.versions.toml	(date 1734437435009)
@@ -0,0 +1,26 @@
+[versions]
+agp = "8.7.2"
+kotlin = "1.9.24"
+coreKtx = "1.15.0"
+junit = "4.13.2"
+junitVersion = "1.1.5"
+espressoCore = "3.6.1"
+appcompat = "1.6.1"
+material = "1.10.0"
+activity = "1.9.3"
+constraintlayout = "2.1.4"
+
+[libraries]
+androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
+junit = { group = "junit", name = "junit", version.ref = "junit" }
+androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
+androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
+androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
+material = { group = "com.google.android.material", name = "material", version.ref = "material" }
+androidx-activity = { group = "androidx.activity", name = "activity", version.ref = "activity" }
+androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
+
+[plugins]
+android-application = { id = "com.android.application", version.ref = "agp" }
+kotlin-android = { id = "org.jetbrains.kotlin.android", version = "2.1.0" }
+
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1733915677725)
+++ b/.idea/gradle.xml	(date 1733915677725)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="CHOOSE_PER_TEST" />
+        <option name="distributionType" value="LOCAL" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleHome" value="$USER_HOME$/.gradle/wrapper/dists/gradle-8.9-bin/1wcpju915gw2zs5iloejomdjk/gradle-8.9" />
+        <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+        <option name="resolveExternalAnnotations" value="false" />
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/migrations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/migrations.xml b/.idea/migrations.xml
new file mode 100644
--- /dev/null	(date 1733912755823)
+++ b/.idea/migrations.xml	(date 1733912755823)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectMigrations">
+    <option name="MigrateToGradleLocalJavaHome">
+      <set>
+        <option value="$PROJECT_DIR$" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
new file mode 100644
--- /dev/null	(date 1733912755826)
+++ b/.idea/runConfigurations.xml	(date 1733912755826)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="com.intellij.execution.junit.AbstractAllInDirectoryConfigurationProducer" />
+        <option value="com.intellij.execution.junit.AllInPackageConfigurationProducer" />
+        <option value="com.intellij.execution.junit.PatternConfigurationProducer" />
+        <option value="com.intellij.execution.junit.TestInClassConfigurationProducer" />
+        <option value="com.intellij.execution.junit.UniqueIdConfigurationProducer" />
+        <option value="com.intellij.execution.junit.testDiscovery.JUnitTestDiscoveryConfigurationProducer" />
+        <option value="org.jetbrains.kotlin.idea.junit.KotlinJUnitRunConfigurationProducer" />
+        <option value="org.jetbrains.kotlin.idea.junit.KotlinPatternConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/example/nfcqsl/NFCLockUnlockActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/nfcqsl/NFCLockUnlockActivity.kt b/app/src/main/java/com/example/nfcqsl/NFCLockUnlockActivity.kt
new file mode 100644
--- /dev/null	(date 1734437141019)
+++ b/app/src/main/java/com/example/nfcqsl/NFCLockUnlockActivity.kt	(date 1734437141019)
@@ -0,0 +1,122 @@
+package com.example.nfcqsl
+
+import android.nfc.Tag
+import android.nfc.TagLostException
+import android.nfc.tech.MifareUltralight
+import android.os.Bundle
+import android.text.InputType
+import android.widget.Button
+import android.widget.CheckBox
+import android.widget.EditText
+import android.widget.TextView
+import android.widget.Toast
+import androidx.activity.enableEdgeToEdge
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import java.io.IOException
+import java.text.SimpleDateFormat
+import java.util.TimeZone
+
+class NFCLockUnlockActivity : AppCompatActivity() {
+
+    private var encrypted = false
+    private var tag : Tag? = null
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enableEdgeToEdge()
+        setContentView(R.layout.activity_nfclock_unlock)
+        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
+            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
+            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
+            insets
+        }
+
+        val button: Button = findViewById<Button>(R.id.buttonLU)
+        val textViewCFM: TextView = findViewById<Button>(R.id.textViewCFM)
+        val editTextPassword: EditText = findViewById<EditText>(R.id.editTextPassword)
+        val editTextCFM: EditText = findViewById<EditText>(R.id.editTextCFM)
+        val checkBoxShowPassword: CheckBox = findViewById<CheckBox>(R.id.checkBoxShowPassword)
+
+        tag = intent.getParcelableExtra<Tag>("tag")
+        if(tag != null) {
+            //Toast.makeText(this, "OK", Toast.LENGTH_SHORT).show()
+        } else {
+            Toast.makeText(this, "Tag info error!", Toast.LENGTH_SHORT).show()
+        }
+
+        encrypted = intent.getBooleanExtra("encrypted", false);
+        if (encrypted){
+            button.text = "Unlock this NFC QSL"
+            textViewCFM.visibility = TextView.INVISIBLE
+            editTextCFM.visibility = EditText.INVISIBLE
+        } else {
+            button.text = "Lock this NFC QSL"
+            textViewCFM.visibility = TextView.VISIBLE
+            editTextCFM.visibility = EditText.VISIBLE
+        }
+
+        checkBoxShowPassword.setOnCheckedChangeListener {
+            compoundButton, b ->
+            if(b){
+                editTextPassword.inputType = InputType.TYPE_CLASS_TEXT
+                editTextCFM.inputType = InputType.TYPE_CLASS_TEXT
+            } else {
+                editTextPassword.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD
+                editTextCFM.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD
+            }
+        }
+
+        button.setOnClickListener {
+            val ul : MifareUltralight = MifareUltralight.get(tag)
+
+            if (editTextPassword.text.length < 8) {
+                Toast.makeText(this, "Password must have length of 8.", Toast.LENGTH_SHORT).show()
+            } else if ((!encrypted) and (editTextPassword.text.toString() != editTextCFM.text.toString())) {
+                Toast.makeText(this, "Password in two input box must be identical.", Toast.LENGTH_SHORT).show()
+            } else {
+                try {
+                    ul.connect()
+                    var passwordInt = editTextPassword.text.toString().toLong(16)
+                    val passwordByteArray = ByteArray(4)
+                    for (i in 0..3){
+                        passwordByteArray[i] = (passwordInt % 256).toByte()
+                        passwordInt /= 256
+                    }
+                    if (encrypted)
+                    {
+                        ul.transceive(byteArrayOf(0x1B.toByte()) + passwordByteArray)
+                        ul.writePage(43, passwordByteArray)
+                        ul.writePage(44, byteArrayOf(0x00.toByte(), 0x00.toByte(), 0x00.toByte(), 0x00.toByte()))
+                        //disable write protection
+                        ul.writePage(41, byteArrayOf(0x04.toByte(), 0x00.toByte(), 0x00.toByte(), 0xFF.toByte()))
+                        Toast.makeText(this, "Unlock NTag successfully! Please re-scan the Tag.", Toast.LENGTH_SHORT)
+                            .show()
+                    } else {
+                        ul.writePage(43, passwordByteArray)
+                        ul.writePage(44, byteArrayOf(0x00.toByte(), 0x00.toByte(), 0x00.toByte(), 0x00.toByte()))
+                        // enable write protection
+                        ul.writePage(41, byteArrayOf(0x04.toByte(), 0x00.toByte(), 0x00.toByte(), 0x00.toByte()))
+                        Toast.makeText(this, "Lock NTag successfully! Please re-scan the Tag.", Toast.LENGTH_SHORT)
+                            .show()
+                    }
+                } catch (e: TagLostException) {
+                    Toast.makeText(this, "Tag Connection Lost.", Toast.LENGTH_SHORT).show()
+                    //this.finish()
+                } catch (e: Exception) {
+                    Toast.makeText(this, "Password Error or Connection Lost.", Toast.LENGTH_SHORT).show()
+                    //this.finish()
+                } finally {
+                    try {
+                        ul.close()
+                        this.finish()
+                    } catch (e: IOException) {
+                        // TODO Auto-generated catch block
+                        e.printStackTrace()
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
new file mode 100644
--- /dev/null	(date 1733916643823)
+++ b/app/build.gradle.kts	(date 1733916643823)
@@ -0,0 +1,48 @@
+plugins {
+    alias(libs.plugins.android.application)
+    alias(libs.plugins.kotlin.android)
+}
+
+android {
+    namespace = "com.example.nfcqsl"
+    compileSdk = 35
+
+    defaultConfig {
+        applicationId = "com.example.nfcqsl"
+        minSdk = 24
+        targetSdk = 35
+        versionCode = 1
+        versionName = "1.0"
+
+        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
+    }
+
+    buildTypes {
+        release {
+            isMinifyEnabled = false
+            proguardFiles(
+                getDefaultProguardFile("proguard-android-optimize.txt"),
+                "proguard-rules.pro"
+            )
+        }
+    }
+    compileOptions {
+        sourceCompatibility = JavaVersion.VERSION_11
+        targetCompatibility = JavaVersion.VERSION_11
+    }
+    kotlinOptions {
+        jvmTarget = "11"
+    }
+}
+
+dependencies {
+
+    implementation(libs.androidx.core.ktx)
+    implementation(libs.androidx.appcompat)
+    implementation(libs.material)
+    implementation(libs.androidx.activity)
+    implementation(libs.androidx.constraintlayout)
+    testImplementation(libs.junit)
+    androidTestImplementation(libs.androidx.junit)
+    androidTestImplementation(libs.androidx.espresso.core)
+}
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1734432604905)
+++ b/app/src/main/AndroidManifest.xml	(date 1734432604905)
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <uses-permission android:name="android.permission.NFC" />
+
+    <uses-feature
+        android:name="android.hardware.nfc"
+        android:required="true" />
+
+    <application
+        android:allowBackup="true"
+        android:dataExtractionRules="@xml/data_extraction_rules"
+        android:fullBackupContent="@xml/backup_rules"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/Theme.NFCQSL"
+        tools:targetApi="31">
+        <activity
+            android:name=".NFCLockUnlockActivity"
+            android:exported="false" />
+        <activity
+            android:name=".NFCReadActivity"
+            android:exported="false"
+            android:windowSoftInputMode="stateVisible|adjustPan"></activity>
+        <activity
+            android:name=".MainActivity"
+            android:exported="true"
+            android:launchMode="singleTop">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
Index: app/src/main/res/layout/activity_nfclock_unlock.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_nfclock_unlock.xml b/app/src/main/res/layout/activity_nfclock_unlock.xml
new file mode 100644
--- /dev/null	(date 1734436151871)
+++ b/app/src/main/res/layout/activity_nfclock_unlock.xml	(date 1734436151871)
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".NFCLockUnlockActivity">
+
+    <LinearLayout
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:layout_marginEnd="10dp"
+        android:layout_marginBottom="10dp"
+        android:orientation="vertical"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <TextView
+            android:id="@+id/textView4"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Password (4-Byte Hexadecimal, 8-digit 0-9 or A-F)" />
+
+        <EditText
+            android:id="@+id/editTextPassword"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:digits="0123456789ABCDEFabcdef"
+            android:ems="10"
+            android:inputType="text|textPassword"
+            android:maxLength="8" />
+
+        <TextView
+            android:id="@+id/textViewCFM"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Confirm Password" />
+
+        <EditText
+            android:id="@+id/editTextCFM"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:digits="0123456789ABCDEFabcdef"
+            android:ems="10"
+            android:inputType="text|textPassword"
+            android:maxLength="8" />
+
+        <CheckBox
+            android:id="@+id/checkBoxShowPassword"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Show Password" />
+
+        <Space
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_weight="1" />
+
+        <Button
+            android:id="@+id/buttonLU"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            android:text="Lock this NFC QSL" />
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/.gitignore b/app/.gitignore
new file mode 100644
--- /dev/null	(date 1733912625236)
+++ b/app/.gitignore	(date 1733912625236)
@@ -0,0 +1,1 @@
+/build
\ No newline at end of file
Index: app/src/androidTest/java/com/example/nfcqsl/ExampleInstrumentedTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/example/nfcqsl/ExampleInstrumentedTest.kt b/app/src/androidTest/java/com/example/nfcqsl/ExampleInstrumentedTest.kt
new file mode 100644
--- /dev/null	(date 1733912625678)
+++ b/app/src/androidTest/java/com/example/nfcqsl/ExampleInstrumentedTest.kt	(date 1733912625678)
@@ -0,0 +1,24 @@
+package com.example.nfcqsl
+
+import androidx.test.platform.app.InstrumentationRegistry
+import androidx.test.ext.junit.runners.AndroidJUnit4
+
+import org.junit.Test
+import org.junit.runner.RunWith
+
+import org.junit.Assert.*
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * See [testing documentation](http://d.android.com/tools/testing).
+ */
+@RunWith(AndroidJUnit4::class)
+class ExampleInstrumentedTest {
+    @Test
+    fun useAppContext() {
+        // Context of the app under test.
+        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
+        assertEquals("com.example.nfcqsl", appContext.packageName)
+    }
+}
\ No newline at end of file
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
new file mode 100644
--- /dev/null	(date 1733912625275)
+++ b/app/proguard-rules.pro	(date 1733912625275)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
\ No newline at end of file
Index: app/src/test/java/com/example/nfcqsl/ExampleUnitTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/example/nfcqsl/ExampleUnitTest.kt b/app/src/test/java/com/example/nfcqsl/ExampleUnitTest.kt
new file mode 100644
--- /dev/null	(date 1733912625661)
+++ b/app/src/test/java/com/example/nfcqsl/ExampleUnitTest.kt	(date 1733912625661)
@@ -0,0 +1,17 @@
+package com.example.nfcqsl
+
+import org.junit.Test
+
+import org.junit.Assert.*
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * See [testing documentation](http://d.android.com/tools/testing).
+ */
+class ExampleUnitTest {
+    @Test
+    fun addition_isCorrect() {
+        assertEquals(4, 2 + 2)
+    }
+}
\ No newline at end of file
